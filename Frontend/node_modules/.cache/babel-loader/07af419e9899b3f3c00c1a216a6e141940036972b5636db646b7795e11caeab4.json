{"ast":null,"code":"var _jsxFileName = \"C:\\\\data\\\\q1\\\\rule-engine-frontend\\\\src\\\\components\\\\CombineRules.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CombineRules = () => {\n  _s();\n  const [ruleIds, setRuleIds] = useState([]);\n  const handleCombine = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/combine-rules', {\n        rule_ids: ruleIds\n      });\n      console.log(response.data);\n    } catch (error) {\n      console.error('Error combining rules:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Combine Rules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Rule IDs (comma separated)\",\n      onChange: e => setRuleIds(e.target.value.split(','))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCombine,\n      children: \"Combine Rules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(CombineRules, \"4AW3/fKo7N8nolhbxm9ZZuFEosQ=\");\n_c = CombineRules;\nexport default CombineRules;\nvar _c;\n$RefreshReg$(_c, \"CombineRules\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CombineRules","_s","ruleIds","setRuleIds","handleCombine","response","post","rule_ids","console","log","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","split","onClick","_c","$RefreshReg$"],"sources":["C:/data/q1/rule-engine-frontend/src/components/CombineRules.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CombineRules = () => {\r\n  const [ruleIds, setRuleIds] = useState([]);\r\n\r\n  const handleCombine = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/combine-rules', { rule_ids: ruleIds });\r\n      console.log(response.data);\r\n    } catch (error) {\r\n      console.error('Error combining rules:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Combine Rules</h3>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Rule IDs (comma separated)\"\r\n        onChange={(e) => setRuleIds(e.target.value.split(','))}\r\n      />\r\n      <button onClick={handleCombine}>Combine Rules</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CombineRules;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,qCAAqC,EAAE;QAAEC,QAAQ,EAAEL;MAAQ,CAAC,CAAC;MAC/FM,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBjB,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,kCAAkC;MAC9CC,QAAQ,EAAGC,CAAC,IAAKjB,UAAU,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,eACFjB,OAAA;MAAQyB,OAAO,EAAEpB,aAAc;MAAAQ,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAACf,EAAA,CAvBID,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAyBlB,eAAeA,YAAY;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}