{"ast":null,"code":"var _jsxFileName = \"C:\\\\data\\\\q1\\\\rule-engine-frontend\\\\src\\\\components\\\\RuleEngine.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RuleEngine = () => {\n  _s();\n  const [ruleString, setRuleString] = useState('');\n  const [ruleIds, setRuleIds] = useState('');\n  const [ruleIdToEvaluate, setRuleIdToEvaluate] = useState('');\n  const [userData, setUserData] = useState('');\n  const [result, setResult] = useState(null);\n\n  // Handle Create Rule\n  const createRule = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/rules/create-rule', {\n        rule_string: ruleString\n      });\n      alert(`Rule created with ID: ${response.data.rule._id}`);\n      setRuleString('');\n    } catch (error) {\n      console.error('Error creating rule:', error);\n      alert('Error creating rule.');\n    }\n  };\n\n  // Handle Combine Rules\n  const combineRules = async (req, res) => {\n    const {\n      rule_ids\n    } = req.body;\n    try {\n      // Fetch the rules by their IDs from the database\n      const rules = await Rule.find({\n        _id: {\n          $in: rule_ids\n        }\n      });\n      if (rules.length === 0) {\n        return res.status(404).json({\n          message: 'No rules found'\n        });\n      }\n\n      // For simplicity, combine all rules using an AND operator\n      // You can enhance this by adding more flexible combination logic\n      let combinedAST = rules[0].ast;\n      for (let i = 1; i < rules.length; i++) {\n        combinedAST = {\n          type: \"operator\",\n          operator: \"AND\",\n          left: combinedAST,\n          right: rules[i].ast\n        };\n      }\n\n      // Save the combined rule in the database\n      const combinedRule = new Rule({\n        rule_string: \"Combined Rule\",\n        ast: combinedAST\n      });\n      await combinedRule.save(); // Save the combined rule\n\n      // Respond with the created combined rule ID\n      res.status(200).json({\n        message: 'Rules combined successfully',\n        combinedRuleId: combinedRule._id\n      });\n    } catch (error) {\n      res.status(400).json({\n        error: 'Failed to combine rules'\n      });\n    }\n  };\n  // Handle Evaluate Rule\n  const evaluateRule = async () => {\n    try {\n      const parsedUserData = JSON.parse(userData);\n      const response = await axios.post('http://localhost:5000/api/rules/evaluate-rule', {\n        rule_id: ruleIdToEvaluate,\n        user_data: parsedUserData\n      });\n      setResult(response.data.result);\n    } catch (error) {\n      console.error('Error evaluating rule:', error);\n      alert('Error evaluating rule.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Rule Engine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Rule String\",\n        value: ruleString,\n        onChange: e => setRuleString(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createRule,\n        children: \"Create Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Combine Rules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Rule IDs (comma separated)\",\n        value: ruleIds,\n        onChange: e => setRuleIds(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: combineRules,\n        children: \"Combine Rules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Evaluate Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Rule ID\",\n        value: ruleIdToEvaluate,\n        onChange: e => setRuleIdToEvaluate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Enter User Data (JSON format)\",\n        value: userData,\n        onChange: e => setUserData(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: evaluateRule,\n        children: \"Evaluate Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), result !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Evaluation Result: \", result ? 'True' : 'False']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(RuleEngine, \"ofu8diqhW6iMtrFsOdbK42qrHxk=\");\n_c = RuleEngine;\nexport default RuleEngine;\nvar _c;\n$RefreshReg$(_c, \"RuleEngine\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","RuleEngine","_s","ruleString","setRuleString","ruleIds","setRuleIds","ruleIdToEvaluate","setRuleIdToEvaluate","userData","setUserData","result","setResult","createRule","response","post","rule_string","alert","data","rule","_id","error","console","combineRules","req","res","rule_ids","body","rules","Rule","find","$in","length","status","json","message","combinedAST","ast","i","type","operator","left","right","combinedRule","save","combinedRuleId","evaluateRule","parsedUserData","JSON","parse","rule_id","user_data","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/data/q1/rule-engine-frontend/src/components/RuleEngine.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst RuleEngine = () => {\r\n  const [ruleString, setRuleString] = useState('');\r\n  const [ruleIds, setRuleIds] = useState('');\r\n  const [ruleIdToEvaluate, setRuleIdToEvaluate] = useState('');\r\n  const [userData, setUserData] = useState('');\r\n  const [result, setResult] = useState(null);\r\n\r\n  // Handle Create Rule\r\n  const createRule = async () => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/rules/create-rule', { rule_string: ruleString });\r\n      alert(`Rule created with ID: ${response.data.rule._id}`);\r\n      setRuleString('');\r\n    } catch (error) {\r\n      console.error('Error creating rule:', error);\r\n      alert('Error creating rule.');\r\n    }\r\n  };\r\n\r\n  // Handle Combine Rules\r\n  const combineRules = async (req, res) => {\r\n  const { rule_ids } = req.body;\r\n\r\n  try {\r\n    // Fetch the rules by their IDs from the database\r\n    const rules = await Rule.find({ _id: { $in: rule_ids } });\r\n\r\n    if (rules.length === 0) {\r\n      return res.status(404).json({ message: 'No rules found' });\r\n    }\r\n\r\n    // For simplicity, combine all rules using an AND operator\r\n    // You can enhance this by adding more flexible combination logic\r\n    let combinedAST = rules[0].ast;\r\n\r\n    for (let i = 1; i < rules.length; i++) {\r\n      combinedAST = {\r\n        type: \"operator\",\r\n        operator: \"AND\",\r\n        left: combinedAST,\r\n        right: rules[i].ast,\r\n      };\r\n    }\r\n\r\n    // Save the combined rule in the database\r\n    const combinedRule = new Rule({\r\n      rule_string: \"Combined Rule\",\r\n      ast: combinedAST\r\n    });\r\n    \r\n    await combinedRule.save(); // Save the combined rule\r\n\r\n    // Respond with the created combined rule ID\r\n    res.status(200).json({ message: 'Rules combined successfully', combinedRuleId: combinedRule._id });\r\n  } catch (error) {\r\n    res.status(400).json({ error: 'Failed to combine rules' });\r\n  }\r\n};\r\n  // Handle Evaluate Rule\r\n  const evaluateRule = async () => {\r\n    try {\r\n      const parsedUserData = JSON.parse(userData);\r\n      const response = await axios.post('http://localhost:5000/api/rules/evaluate-rule', {\r\n        rule_id: ruleIdToEvaluate,\r\n        user_data: parsedUserData\r\n      });\r\n      setResult(response.data.result);\r\n    } catch (error) {\r\n      console.error('Error evaluating rule:', error);\r\n      alert('Error evaluating rule.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Rule Engine</h1>\r\n\r\n      <div>\r\n        <h2>Create Rule</h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Rule String\"\r\n          value={ruleString}\r\n          onChange={(e) => setRuleString(e.target.value)}\r\n        />\r\n        <button onClick={createRule}>Create Rule</button>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Combine Rules</h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Rule IDs (comma separated)\"\r\n          value={ruleIds}\r\n          onChange={(e) => setRuleIds(e.target.value)}\r\n        />\r\n        <button onClick={combineRules}>Combine Rules</button>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Evaluate Rule</h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Rule ID\"\r\n          value={ruleIdToEvaluate}\r\n          onChange={(e) => setRuleIdToEvaluate(e.target.value)}\r\n        />\r\n        <textarea\r\n          placeholder=\"Enter User Data (JSON format)\"\r\n          value={userData}\r\n          onChange={(e) => setUserData(e.target.value)}\r\n        />\r\n        <button onClick={evaluateRule}>Evaluate Rule</button>\r\n\r\n        {result !== null && (\r\n          <div>\r\n            <h3>Evaluation Result: {result ? 'True' : 'False'}</h3>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RuleEngine;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}